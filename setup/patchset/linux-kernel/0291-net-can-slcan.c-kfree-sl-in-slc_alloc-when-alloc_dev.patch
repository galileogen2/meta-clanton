From 1aed8a601b0f0bd223ac571f321aca94e7896190 Mon Sep 17 00:00:00 2001
From: "Chew, Kean Ho" <kean.ho.chew@intel.com>
Date: Tue, 4 Nov 2014 18:53:17 +0800
Subject: [PATCH 291/389] net: can: slcan.c: kfree sl in slc_alloc when
 alloc_dev failed

Klocwork #26063 detected a memory leak in slcan.c. The slc_alloc
did not handle kfree-ing sl when alloc_netdev fails. This causes
a memory leak.

This patch is created to resolve the mentioned issue. If slc_alloc
fails, the handling will kfree sl then return NULL.

Signed-off-by: Chew, Kean Ho <kean.ho.chew@intel.com>
(cherry picked from 3.8 kernel commit 56b475131d822d80be43ce080cac4985d55c6c2e)

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Change-Id: Ied5c1677dd6708612a6a208bbb1272662f63b545
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4675
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
---
 drivers/net/can/slcan.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/net/can/slcan.c b/drivers/net/can/slcan.c
index b0daa98..ad10e1c 100644
--- a/drivers/net/can/slcan.c
+++ b/drivers/net/can/slcan.c
@@ -607,8 +607,10 @@ static struct slcan_channel *slc_alloc(dev_t line)
 		sprintf(name, "slcan%d", i * muxnetdevs + j);
 
 		dev = alloc_netdev(sizeof(*sl_dev), name, slc_setup);
-		if (!dev)
+		if (!dev) {
+			kfree(sl);
 			return NULL;
+		}
 
 		dev->base_addr  = i * muxnetdevs + j;
 		sl_dev = netdev_priv(dev);
-- 
1.9.3

